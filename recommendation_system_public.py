# -*- coding: utf-8 -*-
"""recommendation-system Public.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RI0snHcQaHk6MYQMVP46W_T7GqXA1F0F
"""

# Commented out IPython magic to ensure Python compatibility.
# =====================================
# CELL 1: Install Required Libraries
# =====================================
# Run this cell first! Click the play button ▶️ on the left

!pip install streamlit pandas numpy scikit-learn scipy plotly sqlalchemy psycopg2-binary pyngrok -q
print("✅ Step 1 Complete: All libraries installed!")

# =====================================
# CELL 2: Download and Setup the Recommendation System
# =====================================
# This downloads our code from GitHub and sets everything up

import os
import sys

# Create project directory
!mkdir -p recommendation_system
# %cd recommendation_system

# Download the main recommendation engine code
!wget -q https://raw.githubusercontent.com/yourusername/recommendation-system/main/recommendation_engine.py
!wget -q https://raw.githubusercontent.com/yourusername/recommendation-system/main/dashboard.py

# Alternative: Create the files directly (if GitHub not set up yet)
print("Creating recommendation engine files...")

# Create recommendation_engine.py
recommendation_code = '''
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.decomposition import TruncatedSVD
from scipy.sparse import csr_matrix
from scipy import stats
import warnings
warnings.filterwarnings("ignore")

class SimpleRecommendationSystem:
    """Simplified recommendation system for beginners"""

    def __init__(self):
        self.data = None
        self.recommendations = []

    def create_sample_data(self, n_users=100, n_items=50):
        """Create sample data for testing"""
        print("Creating sample shopping data...")
        np.random.seed(42)

        # Simulate user ratings (1-5 stars)
        data = []
        for user in range(1, n_users + 1):
            n_ratings = np.random.randint(5, 20)
            items = np.random.choice(range(1, n_items + 1), n_ratings, replace=False)
            for item in items:
                rating = np.random.choice([1, 2, 3, 4, 5], p=[0.1, 0.1, 0.2, 0.3, 0.3])
                data.append({
                    "user_id": user,
                    "item_id": item,
                    "rating": rating,
                    "item_name": f"Product_{item}"
                })

        self.data = pd.DataFrame(data)
        print(f"✅ Created {len(self.data)} ratings from {n_users} users for {n_items} products")
        return self.data

    def get_recommendations(self, user_id, n_recommendations=5):
        """Get recommendations for a user"""
        if self.data is None:
            return []

        # Simple popularity-based recommendations
        popular_items = self.data.groupby("item_name")["rating"].agg(["mean", "count"])
        popular_items = popular_items[popular_items["count"] >= 3]
        popular_items["score"] = popular_items["mean"] * np.log1p(popular_items["count"])

        # Get items the user hasn't rated
        user_items = set(self.data[self.data["user_id"] == user_id]["item_name"].values)
        recommendations = []

        for item in popular_items.sort_values("score", ascending=False).index:
            if item not in user_items:
                recommendations.append(item)
                if len(recommendations) >= n_recommendations:
                    break

        return recommendations

    def run_ab_test(self, n_users_test=50):
        """Simple A/B test simulation"""
        print("\\nRunning A/B Test...")
        print("-" * 40)

        results = {
            "Algorithm A (Popular)": {"clicks": 0, "users": 0},
            "Algorithm B (Random)": {"clicks": 0, "users": 0}
        }

        test_users = np.random.choice(self.data["user_id"].unique(), n_users_test, replace=False)

        for i, user in enumerate(test_users):
            # Assign to group A or B
            if i % 2 == 0:
                # Algorithm A: Popular items
                recs = self.get_recommendations(user, 5)
                results["Algorithm A (Popular)"]["users"] += 1
                # Simulate clicks (popular items get more clicks)
                results["Algorithm A (Popular)"]["clicks"] += np.random.binomial(5, 0.3)
            else:
                # Algorithm B: Random items
                all_items = self.data["item_name"].unique()
                recs = np.random.choice(all_items, 5, replace=False)
                results["Algorithm B (Random)"]["users"] += 1
                # Simulate clicks (random items get fewer clicks)
                results["Algorithm B (Random)"]["clicks"] += np.random.binomial(5, 0.15)

        # Calculate click rates
        for algo in results:
            total_shown = results[algo]["users"] * 5
            ctr = results[algo]["clicks"] / total_shown if total_shown > 0 else 0
            results[algo]["ctr"] = ctr

            print(f"\\n{algo}:")
            print(f"  Users: {results[algo]['users']}")
            print(f"  Total Clicks: {results[algo]['clicks']}")
            print(f"  Click Rate: {ctr:.1%}")

        # Determine winner
        if results["Algorithm A (Popular)"]["ctr"] > results["Algorithm B (Random)"]["ctr"]:
            print("\\n🏆 Winner: Algorithm A (Popular Items)")
            print("   Recommendation: Use popularity-based recommendations!")
        else:
            print("\\n🏆 Winner: Algorithm B (Random Items)")

        return results

# Run the system
if __name__ == "__main__":
    print("="*50)
    print("RECOMMENDATION SYSTEM DEMO")
    print("="*50)

    # Create system
    system = SimpleRecommendationSystem()

    # Generate sample data
    data = system.create_sample_data(n_users=100, n_items=50)

    # Show sample recommendations
    print("\\n📋 Sample Recommendations for User 1:")
    print("-" * 40)
    recommendations = system.get_recommendations(1, n_recommendations=5)
    for i, item in enumerate(recommendations, 1):
        print(f"{i}. {item}")

    # Run A/B test
    ab_results = system.run_ab_test(n_users_test=50)

    print("\\n✅ System Ready!")
'''

with open('recommendation_engine.py', 'w') as f:
    f.write(recommendation_code)

print("✅ Step 2 Complete: Recommendation engine created!")

# =====================================
# CELL 3: Create the Web Dashboard
# =====================================

dashboard_code = '''
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# Page config
st.set_page_config(
    page_title="My Recommendation System",
    page_icon="🎯",
    layout="wide"
)

# Title
st.title("🎯 My Recommendation System Dashboard")
st.markdown("### See how recommendations work in real-time!")

# Sidebar
with st.sidebar:
    st.header("Control Panel")

    if st.button("🔄 Generate New Data", type="primary"):
        # Create sample data
        n_users = 100
        n_items = 50
        data = []

        np.random.seed(None)  # Random seed for different data each time

        for user in range(1, n_users + 1):
            n_ratings = np.random.randint(5, 20)
            items = np.random.choice(range(1, n_items + 1), n_ratings, replace=False)
            for item in items:
                rating = np.random.choice([1, 2, 3, 4, 5], p=[0.1, 0.1, 0.2, 0.3, 0.3])
                data.append({
                    "user_id": user,
                    "item_id": item,
                    "rating": rating,
                    "item_name": f"Product_{item}"
                })

        st.session_state.data = pd.DataFrame(data)
        st.success("✅ New data generated!")

    st.markdown("---")

    st.info("""
    **How to use:**
    1. Click 'Generate New Data' to start
    2. Select a user to see their recommendations
    3. View the A/B test results below
    """)

# Main content
if 'data' not in st.session_state:
    st.warning("👈 Click 'Generate New Data' in the sidebar to start!")
else:
    data = st.session_state.data

    # Show statistics
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total Users", f"{data['user_id'].nunique():,}")
    with col2:
        st.metric("Total Products", f"{data['item_id'].nunique():,}")
    with col3:
        st.metric("Total Ratings", f"{len(data):,}")
    with col4:
        st.metric("Avg Rating", f"{data['rating'].mean():.2f} ⭐")

    # User selection for recommendations
    st.header("🎁 Get Personalized Recommendations")

    selected_user = st.selectbox(
        "Select a User ID:",
        options=sorted(data['user_id'].unique()),
        help="Choose a user to see their personalized recommendations"
    )

    if selected_user:
        col1, col2 = st.columns(2)

        with col1:
            st.subheader(f"User {selected_user}'s History")
            user_history = data[data['user_id'] == selected_user][['item_name', 'rating']]
            user_history = user_history.sort_values('rating', ascending=False).head(10)

            for _, row in user_history.iterrows():
                stars = "⭐" * int(row['rating'])
                st.write(f"{row['item_name']}: {stars}")

        with col2:
            st.subheader("Recommended For You")

            # Get recommendations (items not rated by user)
            user_items = set(data[data['user_id'] == selected_user]['item_name'].values)

            # Calculate popular items
            popular = data.groupby('item_name')['rating'].agg(['mean', 'count'])
            popular = popular[popular['count'] >= 3]
            popular['score'] = popular['mean'] * np.log1p(popular['count'])

            recommendations = []
            for item in popular.sort_values('score', ascending=False).index:
                if item not in user_items:
                    recommendations.append(item)
                    if len(recommendations) >= 5:
                        break

            for i, item in enumerate(recommendations, 1):
                avg_rating = popular.loc[item, 'mean']
                st.write(f"{i}. {item} (Predicted: {'⭐' * int(avg_rating)})")

    # A/B Test Results
    st.header("🔬 A/B Test Results")

    # Simulate A/B test
    test_data = []
    for i in range(100):
        if i % 2 == 0:
            # Group A: Popularity-based
            clicks = np.random.binomial(5, 0.3)
            group = "Algorithm A (Popular)"
        else:
            # Group B: Random
            clicks = np.random.binomial(5, 0.15)
            group = "Algorithm B (Random)"

        test_data.append({
            'user': i,
            'group': group,
            'clicks': clicks,
            'shown': 5
        })

    test_df = pd.DataFrame(test_data)

    # Calculate metrics
    results = test_df.groupby('group').agg({
        'clicks': 'sum',
        'shown': 'sum',
        'user': 'count'
    })
    results['ctr'] = results['clicks'] / results['shown']

    # Display results
    col1, col2 = st.columns(2)

    with col1:
        st.metric(
            "Algorithm A (Popular)",
            f"{results.loc['Algorithm A (Popular)', 'ctr']:.1%} CTR",
            delta=f"{results.loc['Algorithm A (Popular)', 'clicks']} clicks"
        )

    with col2:
        st.metric(
            "Algorithm B (Random)",
            f"{results.loc['Algorithm B (Random)', 'ctr']:.1%} CTR",
            delta=f"{results.loc['Algorithm B (Random)', 'clicks']} clicks"
        )

    # Visualization
    fig = go.Figure(data=[
        go.Bar(name='Clicks', x=results.index, y=results['clicks']),
        go.Bar(name='Total Shown', x=results.index, y=results['shown'])
    ])
    fig.update_layout(
        title="A/B Test Performance Comparison",
        barmode='group',
        height=400
    )
    st.plotly_chart(fig, use_container_width=True)

    # Winner announcement
    if results.loc['Algorithm A (Popular)', 'ctr'] > results.loc['Algorithm B (Random)', 'ctr']:
        st.success("🏆 **Winner: Algorithm A (Popularity-based)**  \\nThis algorithm shows items that are popular with other users!")
    else:
        st.info("🏆 **Winner: Algorithm B (Random)**")

    # Statistical significance
    st.subheader("📊 Statistical Significance")

    # Simple explanation
    difference = abs(results.loc['Algorithm A (Popular)', 'ctr'] - results.loc['Algorithm B (Random)', 'ctr'])
    st.write(f"The difference in click rates is **{difference:.1%}**")

    if difference > 0.05:
        st.success("✅ This difference is significant! We can trust these results.")
    else:
        st.warning("⚠️ The difference is small. We need more data to be sure.")

# Footer
st.markdown("---")
st.markdown("Made with ❤️ using Streamlit | Your First Recommendation System!")
'''

with open('dashboard.py', 'w') as f:
    f.write(dashboard_code)

print("✅ Step 3 Complete: Dashboard created!")

# =====================================
# CELL 4: Test the Recommendation System Locally
# =====================================

print("\n" + "="*50)
print("TESTING YOUR RECOMMENDATION SYSTEM")
print("="*50)

# Import and run the recommendation engine
exec(open('recommendation_engine.py').read())

# =====================================
# CELL 5: Make Your Dashboard Live on the Internet!
# =====================================

print("\n" + "="*50)
print("MAKING YOUR DASHBOARD LIVE")
print("="*50)

# Install ngrok for making it public
!pip install pyngrok -q

from pyngrok import ngrok
import subprocess
import time
from google.colab import userdata

# Set up ngrok (creates a public URL)
ngrok.kill()  # Kill any existing connections

# Set ngrok authentication token from Colab Secrets
NGROK_AUTH_TOKEN = userdata.get('NGROK_AUTH_TOKEN')
if NGROK_AUTH_TOKEN:
  ngrok.set_auth_token(NGROK_AUTH_TOKEN)
else:
  print("Please add your ngrok authtoken to Colab Secrets under the name 'NGROK_AUTH_TOKEN'.")


# Start Streamlit in background
print("Starting your dashboard...")
process = subprocess.Popen(["streamlit", "run", "dashboard.py", "--server.port", "8501"])
time.sleep(5)  # Wait for Streamlit to start

# Create public URL
public_url = ngrok.connect(8501)
print("\n" + "🎉"*20)
print(f"\n✅ YOUR DASHBOARD IS NOW LIVE AT:")
print(f"\n🔗 {public_url}")
print(f"\n👉 Click this link to see your dashboard!")
print("\n⚠️ This link will work for 2 hours (free version)")
print("To keep it running longer, leave this notebook open!")
print("\n" + "🎉"*20)